package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.file.Paths;
import java.util.LinkedList;

import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;

import gacha.Gacha;
import pool.PoolResult;
import pool.domain.PoolModel;

/**
 * @version 2.0
 * @author Paul Luu
 */
@SuppressWarnings("serial")
public class GUIWindow extends JFrame {

    /**
     * Creates new form NewJFrame
     */
    public GUIWindow() {
        initComponents();
        
       /**Inputting images and character names into LinkedList. (LinkedList because we need the indexes)
        * The image LinkedList is not used for now. Can be used later to put actual portraits*/
        imgs = new LinkedList<JLabel>();
        characters = new LinkedList<JLabel>();
        
        imgs.add(img0);
        imgs.add(img1);
        imgs.add(img2);
        imgs.add(img3);
        imgs.add(img4);
        imgs.add(img5);
        imgs.add(img6);
        imgs.add(img7);
        imgs.add(img8);
        imgs.add(img9);
        characters.add(character0);
        characters.add(character1);
        characters.add(character2);
        characters.add(character3);
        characters.add(character4);
        characters.add(character5);
        characters.add(character6);
        characters.add(character7);
        characters.add(character8);
        characters.add(character9);
        
        /**Roll the first Gacha*/
        roll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanel = new JTabbedPane();
        gachaPanel = new JPanel();
        grid = new JPanel();
        img0 = new JLabel();
        img1 = new JLabel();
        img2 = new JLabel();
        img3 = new JLabel();
        img4 = new JLabel();
        img5 = new JLabel();
        img6 = new JLabel();
        img7 = new JLabel();
        img8 = new JLabel();
        img9 = new JLabel();
        character0 = new JLabel();
        character1 = new JLabel();
        character2 = new JLabel();
        character3 = new JLabel();
        character4 = new JLabel();
        character5 = new JLabel();
        character6 = new JLabel();
        character7 = new JLabel();
        character8 = new JLabel();
        character9 = new JLabel();
        gachaTitle = new JLabel();
        rowButton = new JButton();
        counterResult = new JLabel();
        statisticPanel = new JPanel();
        scrollArea = new JScrollPane();
        infoArea = new JTextArea();
        percentButton = new JButton();
        rarityButton = new JButton();
        quantityButton = new JButton();
        statTitle = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gacha Simulator");
        setName("frame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(640, 480));

        img0.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img1.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img2.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img3.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img4.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img5.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img6.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img7.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img8.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        img9.setIcon(new ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/template.png")); // NOI18N

        character0.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character1.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character2.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character3.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character4.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character5.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character6.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character7.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character8.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        character9.setText("<html>[SSR]<br/>Rodriguezazora</html>");

        GroupLayout gridLayout = new GroupLayout(grid);
        grid.setLayout(gridLayout);
        gridLayout.setHorizontalGroup(
            gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(gridLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(gridLayout.createSequentialGroup()
                        .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(character5, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                            .addComponent(img5))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(character6, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                            .addComponent(img6))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(gridLayout.createSequentialGroup()
                                .addComponent(img7)
                                .addGap(57, 57, 57)
                                .addComponent(img8))
                            .addGroup(gridLayout.createSequentialGroup()
                                .addComponent(character7, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(character8, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(character9, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))))
                    .addGroup(gridLayout.createSequentialGroup()
                        .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(character0, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                            .addComponent(img0))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(img1)
                            .addGroup(gridLayout.createSequentialGroup()
                                .addComponent(character1, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(character2, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(img2))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(character3, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(img3))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(img4)
                                    .addComponent(character4, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(img9))))))
                .addGap(25, 25, 25))
        );
        gridLayout.setVerticalGroup(
            gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(gridLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(img0, GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.TRAILING, gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(img1, GroupLayout.Alignment.TRAILING)
                            .addComponent(img2, GroupLayout.Alignment.TRAILING))
                        .addComponent(img3, GroupLayout.Alignment.TRAILING))
                    .addComponent(img4, GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(character1, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(character0, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(character3, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                        .addComponent(character4, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
                    .addComponent(character2, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(img5, GroupLayout.Alignment.TRAILING)
                    .addComponent(img6, GroupLayout.Alignment.TRAILING)
                    .addComponent(img7, GroupLayout.Alignment.TRAILING)
                    .addComponent(img9, GroupLayout.Alignment.TRAILING)
                    .addComponent(img8, GroupLayout.Alignment.TRAILING))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(gridLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(character5, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(character6, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(character7, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(character8, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(character9, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gachaTitle.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        gachaTitle.setText("Gacha Simulator");

        rowButton.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        rowButton.setText("Row");
        rowButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                rowButtonActionPerformed(evt);
            }
        });

        counterResult.setText("You have retried 0 time(s).");
        counterResult.setToolTipText("");
        counterResult.setFocusTraversalPolicyProvider(true);
        counterResult.setHorizontalTextPosition(SwingConstants.CENTER);

        GroupLayout gachaPanelLayout = new GroupLayout(gachaPanel);
        gachaPanel.setLayout(gachaPanelLayout);
        gachaPanelLayout.setHorizontalGroup(
            gachaPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(gachaPanelLayout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addComponent(gachaTitle)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(gachaPanelLayout.createSequentialGroup()
                .addGap(0, 34, Short.MAX_VALUE)
                .addGroup(gachaPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(grid, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rowButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(counterResult, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        gachaPanelLayout.setVerticalGroup(
            gachaPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(gachaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gachaTitle)
                .addGap(32, 32, 32)
                .addComponent(grid, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(counterResult)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rowButton)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        tabPanel.addTab("Gacha Simulator", gachaPanel);

        statisticPanel.setPreferredSize(new java.awt.Dimension(640, 480));

        scrollArea.setHorizontalScrollBar(null);

        infoArea.setEditable(false);
        infoArea.setColumns(20);
        infoArea.setRows(5);
        scrollArea.setViewportView(infoArea);

        percentButton.setText("Percentage of rarity characters founded.");
        percentButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                percentButtonActionPerformed(evt);
            }
        });

        rarityButton.setText("Quantity of characters by rarity.");
        rarityButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                rarityButtonActionPerformed(evt);
            }
        });

        quantityButton.setText("Quantity, Name and Rarity of all founded characters.");
        quantityButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                quantityButtonActionPerformed(evt);
            }
        });

        statTitle.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        statTitle.setText("Statistics");

        GroupLayout statisticPanelLayout = new GroupLayout(statisticPanel);
        statisticPanel.setLayout(statisticPanelLayout);
        statisticPanelLayout.setHorizontalGroup(
            statisticPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(statisticPanelLayout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addGroup(statisticPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(percentButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quantityButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rarityButton, GroupLayout.PREFERRED_SIZE, 333, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, statisticPanelLayout.createSequentialGroup()
                .addGap(0, 77, Short.MAX_VALUE)
                .addComponent(scrollArea, GroupLayout.PREFERRED_SIZE, 480, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, statisticPanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statTitle)
                .addGap(276, 276, 276))
        );
        statisticPanelLayout.setVerticalGroup(
            statisticPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(statisticPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(statTitle)
                .addGap(18, 18, 18)
                .addComponent(scrollArea, GroupLayout.PREFERRED_SIZE, 249, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(percentButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rarityButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantityButton)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Statistics", statisticPanel);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(tabPanel, GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(tabPanel, GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void percentButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_percentButtonActionPerformed
    	infoArea.setText("");
    	PoolResult result = new PoolResult(Gacha.characters);
        infoArea.append(result.getResultInPercentage());
    }//GEN-LAST:event_percentButtonActionPerformed
    
    private void rarityButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_rarityButtonActionPerformed
    	infoArea.setText("");
    	PoolResult result = new PoolResult(Gacha.characters);
        infoArea.append(result.getResultInQuantity());
    }//GEN-LAST:event_rarityButtonActionPerformed
    
    private void quantityButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_quantityButtonActionPerformed
    	infoArea.setText("");
    	PoolResult result = new PoolResult(Gacha.characters);
        result.getResultListOfCharacters().forEach((n) -> 
        infoArea.append(String.format("%s%n", n)));
    }//GEN-LAST:event_quantityButtonActionPerformed

    private void rowButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_rowButtonActionPerformed
    	roll();
    }//GEN-LAST:event_rowButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel character0;
    private JLabel character1;
    private JLabel character2;
    private JLabel character3;
    private JLabel character4;
    private JLabel character5;
    private JLabel character6;
    private JLabel character7;
    private JLabel character8;
    private JLabel character9;
    private JLabel counterResult;
    private JPanel gachaPanel;
    private JLabel gachaTitle;
    private JPanel grid;
    private JLabel img0;
    private JLabel img1;
    private JLabel img2;
    private JLabel img3;
    private JLabel img4;
    private JLabel img5;
    private JLabel img6;
    private JLabel img7;
    private JLabel img8;
    private JLabel img9;
    private JTextArea infoArea;
    private JButton percentButton;
    private JButton quantityButton;
    private JButton rarityButton;
    private JButton rowButton;
    private JScrollPane scrollArea;
    private JLabel statTitle;
    private JPanel statisticPanel;
    private JTabbedPane tabPanel;
    // End of variables declaration//GEN-END:variables
    
    private LinkedList<JLabel> imgs;	
    private LinkedList<JLabel> characters;
    
    private void roll(){
    	int index = 0;
        for (PoolModel prize : Gacha.huntMenu()) {
			characters.get(index).setText("<html>"+ prize.getParsedTier() + "<br/>"+ prize.getName() + "</html>");
			index++;
        }
        counterResult.setText(Gacha.counterResult());
    }
}
